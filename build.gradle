plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '7.1.1'
}

group = 'com.nationsrpg.plugin'
version = '1.0.0'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'jitpack'
        url 'https://jitpack.io'
    }
    maven {
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
    maven {
        url = "https://repo.codemc.org/repository/maven-public/"
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.18.1-R0.1-SNAPSHOT'
    compileOnly 'org.jetbrains:annotations:22.0.0'
    compileOnly 'de.tr7zw:item-nbt-api:2.8.0'

    implementation 'me.lucko:helper:5.6.8'
    implementation 'co.aikar:acf-paper:0.5.0-SNAPSHOT'
    implementation files('libs/DataStore-API-1.0.0.jar')
    implementation files('libs/DataStore-MySQL-1.0.0.jar')
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('*.yml') {
        expand props
    }
}

shadowJar {
    archiveBaseName.set("NationsRPG-Core")
    archiveClassifier.set("")

    relocate 'co.aikar.commands', 'com.nationsrpg.libs.aikar.commands'
    relocate 'co.aikar.locales', 'com.nationsrpg.libs.aikar.locales'
    relocate 'me.lucko', 'com.nationsrpg.libs.lucko'
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}
